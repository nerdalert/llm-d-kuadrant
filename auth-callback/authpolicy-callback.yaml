###############################################################################
# 1.  API-KEY SECRETS  – now annotated with “free” or “premium”
###############################################################################
apiVersion: v1
kind: Secret
metadata:
  name: premiumuser1-apikey
  namespace: llm-d
  labels:
    kuadrant.io/auth-secret: "true"
    app: llm-d-kuadrant
  annotations:
    # premium tier
    kuadrant.io/groups: premium
    secret.kuadrant.io/user-id: premiumuser1
stringData:
  api_key: premiumuser1_key
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: free1-apikey
  namespace: llm-d
  labels:
    kuadrant.io/auth-secret: "true"
    app: llm-d-kuadrant
  annotations:
    # free tier
    kuadrant.io/groups: free
    secret.kuadrant.io/user-id: freeuser1
stringData:
  api_key: freeuser1_key
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: free2-apikey
  namespace: llm-d
  labels:
    kuadrant.io/auth-secret: "true"
    app: llm-d-kuadrant
  annotations:
    kuadrant.io/groups: free
    secret.kuadrant.io/user-id: freeuser2
stringData:
  api_key: freeuser2_key
type: Opaque

---
###############################################################################
# 2 · AUTH POLICY – API-key auth + callback
###############################################################################
apiVersion: kuadrant.io/v1
kind: AuthPolicy
metadata:
  name: llm-api-keys
  namespace: llm-d
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: llm-d-inference-gateway

  rules:
    # ---------- 1) authentication ----------
    authentication:
      api-key-users:
        apiKey:
          allNamespaces: true
          selector:
            matchLabels:
              app: llm-d-kuadrant
        credentials:
          authorizationHeader:
            prefix: APIKEY

    # ---------- 2) response  ----------
    response:
      success:
        filters:
          identity:
            json:
              properties:
                userid:
                  selector: auth.identity.metadata.annotations.secret\.kuadrant\.io/user-id
                groups:
                  selector: auth.identity.metadata.annotations.kuadrant\.io/groups

    # ---------- 3) authorization ----------
    authorization:
      allow-groups:
        opa:
          rego: |
            groups := split(object.get(input.auth.identity.metadata.annotations, "kuadrant.io/groups", ""), ",")
            allow { groups[_] == "free" }
            allow { groups[_] == "premium" }

    # ---------- 4) callback ----------
    callbacks:
      usage-accounting:
        http:
          url: http://usage-tracking.llm-d.svc.cluster.local/track
          method: POST
          contentType: application/json
          body:
            expression: |
              {
                "user":   auth.identity.metadata.annotations["secret.kuadrant.io/user-id"],
                "groups": auth.identity.metadata.annotations["kuadrant.io/groups"],
                "path":   request.path,
                "host":   request.host,
                "method": request.method
              }

###############################################################################
# 3.  RATELIMITPOLICY  –  2 req/2 min for free, 10 req/2 min for premium
###############################################################################
---
apiVersion: kuadrant.io/v1
kind: RateLimitPolicy
metadata:
  name: basic-rate-limits
  namespace: llm-d
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: llm-d-inference-gateway

  limits:
    # ----- FREE TIER: 2 requests / 2 min ------------------------------------ #
    free-user-requests:
      rates:
        - limit: 2
          window: 2m
      when:
        - predicate: |
            auth.identity.groups.split(",").exists(g, g == "free")
      counters:
        - expression: auth.identity.userid
    # ----- PREMIUM TIER: 10 requests / 2 min --------------------------------- #
    premium-user-requests:
      rates:
        - limit: 10
          window: 2m
      when:
        - predicate: |
            auth.identity.groups.split(",").exists(g, g == "premium")
      counters:
        - expression: auth.identity.userid
